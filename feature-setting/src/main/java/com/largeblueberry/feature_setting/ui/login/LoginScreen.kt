package com.largeblueberry.feature_setting.ui.login

import android.app.Activity
import androidx.activity.compose.rememberLauncherForActivityResult
import androidx.activity.result.contract.ActivityResultContracts
import androidx.compose.foundation.Image
import androidx.compose.foundation.background
import androidx.compose.foundation.layout.*
import androidx.compose.foundation.shape.CircleShape
import androidx.compose.foundation.shape.RoundedCornerShape
import androidx.compose.material3.*
import androidx.compose.runtime.*
import androidx.compose.ui.Alignment
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.Color
import androidx.compose.ui.layout.ContentScale
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.painterResource
import androidx.compose.ui.text.font.FontWeight
import androidx.compose.ui.text.style.TextAlign
import androidx.compose.ui.unit.dp
import androidx.compose.ui.unit.sp
import androidx.hilt.navigation.compose.hiltViewModel
import com.google.android.gms.auth.api.signin.GoogleSignIn
import com.google.android.gms.common.api.ApiException
import com.largeblueberry.core_ui.R
import com.largeblueberry.feature_setting.firebase.auth.AuthState

@OptIn(ExperimentalMaterial3Api::class)
@Composable
fun LoginScreen(
    viewModel: LoginViewModel = hiltViewModel(),
    onNavigateToMain: () -> Unit = {},
    onNavigateBack: () -> Unit = {},
    modifier: Modifier = Modifier
) {
    val context = LocalContext.current
    val uiState by viewModel.uiState.collectAsState()
    val authState by viewModel.authState.collectAsState()

    // üöÄ Google Sign-In Launcher
    val googleSignInLauncher = rememberLauncherForActivityResult(
        contract = ActivityResultContracts.StartActivityForResult()
    ) { result ->
        if (result.resultCode == Activity.RESULT_OK) {
            val task = GoogleSignIn.getSignedInAccountFromIntent(result.data)
            try {
                val account = task.getResult(ApiException::class.java)
                account.idToken?.let { idToken ->
                    viewModel.signInWithGoogle(idToken)
                }
            } catch (e: ApiException) {
                viewModel.clearError()
            }
        }
    }

    // üîÑ Î°úÍ∑∏Ïù∏ ÏÑ±Í≥µ Ïãú ÏÑ§Ï†ï ÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
    LaunchedEffect(authState) {
        if (authState is AuthState.Authenticated) {
            onNavigateToMain() // ÏÑ§Ï†ï ÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞
        }
    }

    // üö® ÏóêÎü¨ Î©îÏãúÏßÄ ÌëúÏãú
    uiState.errorMessage?.let { errorMessage ->
        LaunchedEffect(errorMessage) {
            viewModel.clearError()
        }
    }

    Column(
        modifier = modifier
            .fillMaxSize()
            .background(Color(0xFFF8F9FA))
            .padding(24.dp),
        horizontalAlignment = Alignment.CenterHorizontally
    ) {

        Spacer(modifier = Modifier.height(40.dp))

        // üéµ Ïï± Î°úÍ≥† Î∞è Ï†úÎ™© (ÏóÖÎ°úÎìúÎêú Î°úÍ≥† ÏÇ¨Ïö©)
        AppLogo()

        Spacer(modifier = Modifier.height(40.dp))

        // üì± ÏÑ§Ï†ïÏóêÏÑú Ïò® Í≤ÉÏùÑ ÎÇòÌÉÄÎÇ¥Îäî ÏïàÎÇ¥ ÌÖçÏä§Ìä∏
        Text(
            text = "Í≥ÑÏ†ï Ïó∞Í≤∞",
            fontSize = 28.sp,
            fontWeight = FontWeight.Bold,
            color = Color(0xFF333333)
        )

        Spacer(modifier = Modifier.height(8.dp))

        Text(
            text = "Google Í≥ÑÏ†ïÏúºÎ°ú Î°úÍ∑∏Ïù∏ÌïòÏó¨\nÎçî ÎßéÏùÄ Í∏∞Îä•ÏùÑ Ïù¥Ïö©Ìï¥Î≥¥ÏÑ∏Ïöî",
            fontSize = 16.sp,
            color = Color(0xFF666666),
            textAlign = TextAlign.Center,
            lineHeight = 24.sp
        )

        Spacer(modifier = Modifier.height(40.dp))

        // üîê Î°úÍ∑∏Ïù∏ Ïπ¥Îìú
        LoginCard(
            isLoading = uiState.isLoading,
            canUseWithoutLogin = uiState.canUseWithoutLogin,
            usageWarning = viewModel.getUsageWarningMessage(),
            onGoogleSignIn = {
                // ÏàòÏ†ïÎêú Î∂ÄÎ∂Ñ: Ìï®Ïàò Ìò∏Ï∂úÏóêÏÑú ÏÜçÏÑ± Ï†ëÍ∑ºÏúºÎ°ú Î≥ÄÍ≤Ω
                val signInIntent = viewModel.googleSignInClient.signInIntent
                googleSignInLauncher.launch(signInIntent)
            },
            onSkip = onNavigateBack // Í±¥ÎÑàÎõ∞Í∏∞Î°ú ÏÑ§Ï†ï ÌôîÎ©¥ Î≥µÍ∑Ä
        )

        Spacer(modifier = Modifier.weight(1f))

        // üìä Î°úÍ∑∏Ïù∏ ÌòúÌÉù ÏïàÎÇ¥
        BenefitsCard()

        Spacer(modifier = Modifier.height(16.dp))

        // üìù ÌïòÎã® ÌÖçÏä§Ìä∏
        Text(
            text = "Î°úÍ∑∏Ïù∏ÌïòÎ©¥ ÏÑúÎπÑÏä§ ÏïΩÍ¥ÄÏóê ÎèôÏùòÌïòÎäî Í≤ÉÏúºÎ°ú Í∞ÑÏ£ºÎê©ÎãàÎã§",
            style = MaterialTheme.typography.bodySmall,
            color = Color(0xFF999999),
            textAlign = TextAlign.Center,
            modifier = Modifier.padding(horizontal = 32.dp)
        )

        Spacer(modifier = Modifier.height(24.dp))
    }

    // üîÑ Î°úÎî© Ïò§Î≤ÑÎ†àÏù¥
    if (uiState.isLoading) {
        Box(
            modifier = Modifier
                .fillMaxSize()
                .background(Color.Black.copy(alpha = 0.5f)),
            contentAlignment = Alignment.Center
        ) {
            Card(
                shape = RoundedCornerShape(16.dp),
                colors = CardDefaults.cardColors(containerColor = Color.White)
            ) {
                Column(
                    modifier = Modifier.padding(32.dp),
                    horizontalAlignment = Alignment.CenterHorizontally
                ) {
                    CircularProgressIndicator(
                        color = Color(0xFF4285F4)
                    )
                    Spacer(modifier = Modifier.height(16.dp))
                    Text(
                        text = "Î°úÍ∑∏Ïù∏ Ï§ë...",
                        style = MaterialTheme.typography.bodyMedium
                    )
                }
            }
        }
    }
}

@Composable
private fun AppLogo() {
    Column(
        horizontalAlignment = Alignment.CenterHorizontally
    ) {
        // üé® ÏóÖÎ°úÎìúÎêú Î°úÍ≥† Ïù¥ÎØ∏ÏßÄ ÏÇ¨Ïö© (Î∞∞Í≤Ω Ï†úÍ±∞)
        Image(
            painter = painterResource(id = R.drawable.eareamsplash),
            contentDescription = "Ïù¥Ïñ¥Î¶Ñ Î°úÍ≥†",
            modifier = Modifier
                .size(140.dp)
                .padding(16.dp),
            contentScale = ContentScale.Fit
        )

        Spacer(modifier = Modifier.height(8.dp))

        // Ïï± Ï†úÎ™©ÏùÄ Î°úÍ≥†Ïóê Ïù¥ÎØ∏ Ìè¨Ìï®ÎêòÏñ¥ ÏûàÏúºÎØÄÎ°ú Ï†úÍ±∞ÌïòÍ±∞ÎÇò Í∞ÑÏÜåÌôî
        Text(
            text = "Îì£Í≥†, ÍøàÍæ∏Îäî AI ÏûëÍ≥° ÏÑúÎπÑÏä§",
            fontSize = 16.sp,
            color = Color(0xFF666666),
            textAlign = TextAlign.Center
        )
    }
}

@Composable
private fun LoginCard(
    isLoading: Boolean,
    canUseWithoutLogin: Boolean,
    usageWarning: String?,
    onGoogleSignIn: () -> Unit,
    onSkip: () -> Unit
) {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 8.dp),
        shape = RoundedCornerShape(20.dp),
        colors = CardDefaults.cardColors(
            containerColor = Color.White
        ),
        elevation = CardDefaults.cardElevation(
            defaultElevation = 8.dp
        )
    ) {
        Column(
            modifier = Modifier.padding(32.dp),
            horizontalAlignment = Alignment.CenterHorizontally
        ) {

            // üö® ÏÇ¨Ïö©Îüâ Í≤ΩÍ≥† Î©îÏãúÏßÄ
            usageWarning?.let { warning ->
                Card(
                    colors = CardDefaults.cardColors(
                        containerColor = Color(0xFFFFF3E0)
                    ),
                    modifier = Modifier.fillMaxWidth()
                ) {
                    Text(
                        text = warning,
                        modifier = Modifier.padding(12.dp),
                        style = MaterialTheme.typography.bodySmall,
                        color = Color(0xFFE65100),
                        textAlign = TextAlign.Center
                    )
                }
                Spacer(modifier = Modifier.height(20.dp))
            }

            // Google Î°úÍ∑∏Ïù∏ Î≤ÑÌäº
            GoogleSignInButton(
                onClick = onGoogleSignIn,
                enabled = !isLoading
            )

            Spacer(modifier = Modifier.height(20.dp))

            // ÎòêÎäî Íµ¨Î∂ÑÏÑ†
            Row(
                verticalAlignment = Alignment.CenterVertically,
                modifier = Modifier.fillMaxWidth()
            ) {
                HorizontalDivider(
                    modifier = Modifier.weight(1f),
                    color = Color(0xFFE0E0E0)
                )
                Text(
                    text = "  ÎòêÎäî  ",
                    color = Color(0xFF999999),
                    fontSize = 12.sp
                )
                HorizontalDivider(
                    modifier = Modifier.weight(1f),
                    color = Color(0xFFE0E0E0)
                )
            }

            Spacer(modifier = Modifier.height(20.dp))

            // Í±¥ÎÑàÎõ∞Í∏∞ Î≤ÑÌäº (ÏÑ§Ï†ï ÌôîÎ©¥ÏúºÎ°ú ÎèåÏïÑÍ∞ÄÍ∏∞)
            TextButton(
                onClick = onSkip,
                modifier = Modifier.fillMaxWidth(),
                enabled = !isLoading
            ) {
                Text(
                    text = "ÎÇòÏ§ëÏóê ÌïòÍ∏∞",
                    color = Color(0xFF666666),
                    fontSize = 16.sp,
                    modifier = Modifier.padding(vertical = 4.dp)
                )
            }
        }
    }
}

@Composable
private fun BenefitsCard() {
    Card(
        modifier = Modifier
            .fillMaxWidth()
            .padding(horizontal = 8.dp),
        shape = RoundedCornerShape(16.dp),
        colors = CardDefaults.cardColors(
            containerColor = Color(0xFFF3F8FF)
        )
    ) {
        Column(
            modifier = Modifier.padding(20.dp)
        ) {
            Text(
                text = "üéµ Î°úÍ∑∏Ïù∏ ÌòúÌÉù",
                fontSize = 16.sp,
                fontWeight = FontWeight.Bold,
                color = Color(0xFF4285F4)
            )

            Spacer(modifier = Modifier.height(12.dp))

            BenefitItem("‚úÖ Î¨¥Ï†úÌïú AI ÏûëÍ≥° ÏÉùÏÑ±")
            BenefitItem("üíæ ÏûëÌíà ÌÅ¥ÎùºÏö∞Îìú Ï†ÄÏû•")
            BenefitItem("üì± Î™®Îì† Í∏∞Í∏∞ÏóêÏÑú ÎèôÍ∏∞Ìôî")
            BenefitItem("üé® ÌîÑÎ¶¨ÎØ∏ÏóÑ Í∏∞Îä• Ïù¥Ïö©")
        }
    }
}

@Composable
private fun BenefitItem(text: String) {
    Row(
        modifier = Modifier
            .fillMaxWidth()
            .padding(vertical = 2.dp),
        verticalAlignment = Alignment.CenterVertically
    ) {
        Text(
            text = text,
            fontSize = 14.sp,
            color = Color(0xFF333333)
        )
    }
}

@Composable
private fun GoogleSignInButton(
    onClick: () -> Unit,
    enabled: Boolean = true
) {
    Button(
        onClick = onClick,
        modifier = Modifier.fillMaxWidth(),
        shape = RoundedCornerShape(12.dp),
        colors = ButtonDefaults.buttonColors(
            containerColor = Color(0xFF4285F4),
            disabledContainerColor = Color.Gray
        ),
        enabled = enabled
    ) {
        Row(
            verticalAlignment = Alignment.CenterVertically,
            horizontalArrangement = Arrangement.Center,
            modifier = Modifier.padding(vertical = 12.dp)
        ) {
            Box(
                modifier = Modifier
                    .size(24.dp)
                    .background(Color.White, CircleShape),
                contentAlignment = Alignment.Center
            ) {
                Text(
                    text = "G",
                    color = Color(0xFF4285F4),
                    fontWeight = FontWeight.Bold,
                    fontSize = 14.sp
                )
            }

            Spacer(modifier = Modifier.width(12.dp))

            Text(
                text = "Google Í≥ÑÏ†ïÏúºÎ°ú Î°úÍ∑∏Ïù∏",
                color = Color.White,
                fontSize = 16.sp,
                fontWeight = FontWeight.Medium
            )
        }
    }
}